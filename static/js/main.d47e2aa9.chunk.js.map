{"version":3,"sources":["Constants.ts","EmployeeService.ts","Employee.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["MESSAGES","EmployeeService","file","fetch","response","json","data","employees","ceo","filter","x","managerId","length","Error","dict","item","id","current","children","push","currentDeep","maxDeep","childDeep","this","findMaxDeep","Math","max","Employee","props","service","state","showSample","fetchData","hierarchy","transform","setState","error","toString","deep","columns","index","key","name","Fragment","className","map","renderItem","onClick","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d47e2aa9.chunk.js","sourcesContent":["export const MESSAGES = {\n    MultipleCEOFound : \"Bad data: with more than 1 employee without managerId\",\n    EmployeeWithNoId: \"Bad data: Employee doesn't has valid id\",\n    NoCEOFound: \"Bad Data: No CEO Found\"\n}","import { IEmployee, IHierarchyItem } from \"./model\";\nimport { MESSAGES } from \"./Constants\";\n\nexport class EmployeeService {\n    /**\n     * Fetching sample data from static json file\n     */\n  async fetchData(file: string): Promise<IEmployee[]> {\n    const response = await fetch(file);\n    const data = await response.json();\n    return data as IEmployee[];\n  }\n  /**\n   * The function to transform tabular data structure to hierarchical data\n   * @param data input data is a flat list of employee\n   * @return the output is hirachical data\n   *\n   */\n  transform(data: IEmployee[]): IHierarchyItem<IEmployee> {\n    const employees = [...data];\n    // CEO is employee with no manager, if there is more than 1 CEO, stop process with error as invalid data\n    // this code is not good for perfomance\n    const ceo = employees.filter(x => !x.managerId);\n    if(ceo.length ===0 ) {\n      throw new Error(MESSAGES.NoCEOFound);\n    }\n\n    if (ceo.length > 1) {\n      throw new Error(MESSAGES.MultipleCEOFound);\n    }\n\n    const dict: { [x: number]: IHierarchyItem<IEmployee> } = {};\n    // Should we care about data with duplicate employee Id, \n    // Using dictionary to store reference data, this is fastest way to process data\n    // With this method if there is an employee with invalid manager ID, it will automatically excluded from the Hierarchy , seem sample 4\n    for (const item of employees) {\n      // Assume that if any data not have id is critical error, we will stop processing.\n      // item.id is null or undefined\n      if(!item.id || item.id === null) {\n        throw new Error(MESSAGES.EmployeeWithNoId);\n      }\n      if (!dict[item.id]) {\n        \n        dict[item.id] = {\n          current: item,\n          children: []\n        };\n      } else {\n        // if we care about validate duplicate ID, we should implement it here by check dict[item.id].current  != null, lets not care about this case in this code challenge.\n        \n        dict[item.id].current = item;\n      }\n\n      if (item.managerId && dict[item.managerId]) {\n        dict[item.managerId].children.push(dict[item.id]);\n      }\n\n      if (item.managerId && !dict[item.managerId]) {\n        dict[item.managerId] = {\n          children: [dict[item.id]]\n        };\n      }\n    }\n\n    return dict[ceo[0].id];\n  }\n  \n  /**\n   * Recursive to find the max nested level of data\n   * @param data \n   * @param currentDeep \n   */\n  findMaxDeep(data: IHierarchyItem<IEmployee>, currentDeep: number = 0) {\n    if (!data.children || data.children.length === 0) {\n        return currentDeep + 1;\n    }\n    let maxDeep = 0;\n    for (const item of data.children) {\n        const childDeep = this.findMaxDeep(item, currentDeep +1);\n        maxDeep = Math.max(childDeep, maxDeep);\n    }\n    return maxDeep;\n  }\n}\n","import React, { Component } from \"react\";\nimport { EmployeeService } from \"./EmployeeService\";\nimport { IEmployee, IHierarchyItem } from \"./model\";\ninterface IEmployeeState {\n  employees?: IEmployee[];\n  hierarchy?: IHierarchyItem<IEmployee>;\n  maxDeep?: number;\n  error?: any;\n}\nexport default class Employee extends Component<{}, IEmployeeState> {\n  private service: EmployeeService;\n  constructor(props: any) {\n    super(props);\n    this.service = new EmployeeService();\n    this.state = {};\n  }\n  async componentDidMount() {\n    this.showSample(\"data.json\");\n  }\n  async showSample(file: string) {\n    try {\n      const employees = await this.service.fetchData(file);\n      const hierarchy = this.service.transform(employees);\n      const maxDeep = this.service.findMaxDeep(hierarchy);\n      this.setState({ employees, hierarchy, maxDeep, error: null }, () => {\n      });\n    } catch (err) {\n      this.setState({ error: err.toString(), hierarchy: null, employees: null });\n    }\n  }\n  renderItem(\n    item: IHierarchyItem<IEmployee>,\n    maxDeep: number,\n    deep: number = 0\n  ) {\n    const columns = [];\n    for (let index = 0; index < maxDeep; index++) {\n      columns.push(\n        <td key={item.current.id + \"_\" + deep + \"_\" + index}>\n          {deep === index ? item.current.name : null}\n        </td>\n      );\n    }\n    return (\n      <React.Fragment key={item.current.id}>\n        <tr className=\"item-row\">{columns}</tr>\n        {item.children.map(x => this.renderItem(x, maxDeep, deep + 1))}\n      </React.Fragment>\n    );\n  }\n  render() {\n    const { hierarchy = null, maxDeep, error } = this.state;\n\n    return (\n      <div>\n        <h1>Company Structure</h1>\n        <div className=\"Buttons\">\n          <button onClick={() => this.showSample(\"data.json\")}>\n            Standard Test\n          </button>\n          <button onClick={() => this.showSample(\"data2.json\")}>\n            Dynamic Hierarchy level\n          </button>\n          <button onClick={() => this.showSample(\"data3.json\")}>\n            Multiple Empty Manager ID\n          </button>\n\n          <button onClick={() => this.showSample(\"data4.json\")}>\n            With Invalid Manager\n          </button>\n        </div>\n        {error &&<div className=\"Error\">{error}</div>}\n        {hierarchy && (\n        <table className=\"Org-Chart\">\n          <tbody>{this.renderItem(hierarchy, maxDeep)}</tbody>\n        </table>)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  Employee from './Employee';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className=\"App-content\">\n        <Employee></Employee>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}